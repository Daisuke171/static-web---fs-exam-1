---
export const prerender = true; ///for server

// import MainLayout from "../../layout/MainLayout.astro";
import ActorCard from "../../components/ActorCard.astro";
// import NavBar from "../../components/navBar.astro";
import CatalogueLayout from "../../layout/CatalogueLayout.astro";

import type { GetStaticPaths } from "astro";
import { slugify } from "../../utils/slugify";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const API_KEY = "1e7a7835f074482139d752775addeb5e";
  const pageCount = 18;
  const pageSize = 24;
  const actors = [];

  for (let i = 1; i <= pageCount; i++) {
    const response = await fetch(
      `https://api.themoviedb.org/3/person/popular?api_key=${API_KEY}&language=es-ES&page=${i}`,
    );
    const data = await response.json();
    actors.push(...data.results);
  }

  return paginate(actors, { pageSize });
};

interface actors {
  profile_path: string;
  name: string;
  popularity: number;
  id: number;
}

interface Page {
  data: actors[];
  currentPage: number;
  lastPage: number;
}

const { page } = Astro.props as { page: Page };
---


<CatalogueLayout name="Actor Catalogue">
  <main>
    <div class="movies-container">
      {
        page.data.map(
          (actors: {
            profile_path: string;
            name: string;
            popularity: number;
            id: number;
          }) => (
            <div class="actor-item" data-slug={`${slugify(actors.name)}-${actors.id}`}>
              <ActorCard
                img={`https://image.tmdb.org/t/p/w500${actors.profile_path}`}
                title={actors.name}
                vote_average={actors.popularity}
                id={actors.id}
                slug={`${slugify(actors.name)}-${actors.id}`}
              />
            </div>
          ),
        )
      }
    </div>
  </main>

  <footer class="footer">
    <nav class="footer-nav">
      <a href="/actors/1" class="footer-nav__link" data-astro-reload>Inicio</a>
      {
        page.currentPage > 1 && 
        (
          <a href={`/actors/${page.currentPage - 1}`} class="footer-nav__link" data-astro-reload>
            Anterior
          </a>
        )
      }
      {
        page.currentPage < page.lastPage &&
        (
          <a href={`/actors/${page.currentPage + 1}`} class="footer-nav__link" data-astro-reload>
            Siguiente
          </a>
        )
      }
      <span class="footer-nav__info">
        PÃ¡gina {page.currentPage} de {page.lastPage}
      </span>
    </nav>
  </footer>
</CatalogueLayout>

  



<script>
  function slugify(title) {
    return title
      .toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/--+/g, '-')
      .trim();
  }

  const $button = document.querySelector('.header-catalog__button');
  const $search = document.querySelector('.header-catalog__search');

  $button.addEventListener('click', async () => {
    const query = $search.value;
    if (!query) {
      alert('Please enter the name of an actor');
    }
    const API_KEY="1e7a7835f074482139d752775addeb5e";
    let actorFound = false;

    for (let i = 1; i <= 18 && !actorFound; i++) 
    {
        const response = await fetch(
          `https://api.themoviedb.org/3/person/popular?api_key=${API_KEY}&language=es-ES&page=${i}`
        );
        const data = await response.json();
        actorFound=data.results.find(actor=> 
          slugify(actor.name).includes(slugify(query))
        );
        if (actorFound) {
          window.location.href = `/actors/${slugify(actorFound.name)}-${actorFound.id}`;
        }
    } 
    if (!actorFound) {
      alert('No actors found with that name.');
    }
  });
  

</script>



<style>
  html, body {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  background-color: var(--color-background);
  display: flex;
  flex-direction: column;
  font-family: var(--font-main);
}

main {
  flex: 1;
  width: 100%;
  background-color: var(--color-dark); 
  padding-top: 1rem; 
}

  .header-catalog {
    padding-bottom: 3rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    align-items: center;
    background: var(--gradient-primary);
    color: var(--color-light);  
 
    color: var(--color-light);
  }

  .header-catalog__title {
    font-size: 3.5rem;
    text-align: center;
    margin: 0;
    background: linear-gradient(
      to right,
      var(--color-light),
      var(--color-accent)
    );
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    font-weight: var(--font-weight-bold);
    font-family: var(--font-main);
  }

    .header-catalog__search {
      width: 100%;
      max-width: 350px;
      padding: 1em ;
      border-radius: 20px;
      border: 1px solid rgba(255,255,255,0.4);
      background-color: rgba(255,255,255,0.1);
      
       
    }
    .header-catalog__search::placeholder {
      color: var(--color-light);
      font-family: var(--font-main);
      font-weight: var(--font-weight-regular);
    }

    .header-catalog__button-go-to-home{
      width: fit-content;
      padding: 0.5em 1.5em;
      border-radius: 20px;
      border: none;
      background: linear-gradient(to right, var(--color-light), var(--color-accent));
      color: var(--color-dark);
      cursor: pointer;
      transition: all 0.3s ease;
    }
  .header-catalog__search {
    width: 100%;
    max-width: 350px;
    padding: 0.8em;
    font-size: 1.2rem;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.4);
    background-color: rgba(255, 255, 255, 0.1);
  }
  .header-catalog__search::placeholder {
    color: var(--color-light);
    font-family: var(--font-main);
    font-weight: var(--font-weight-regular);
  }

  .header-catalog__button {
    width: fit-content;
    padding: 0.7em 2em;
    border-radius: 20px;
    border: none;
    background-color: var(--color-accent);
    color: var(--color-dark);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
  }
  .header-catalog__button:hover {
    background-color: var(--color-light);
  }

  .movies-container {
  padding: 2rem;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 2rem;
  justify-items: center;
  width: 100%;
  box-sizing: border-box;
  max-width: 1600px;
  margin: 0 auto;
}

  .footer {
    background: var(--color-dark);
    color: var(--color-light);
    padding: 2rem 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-top: 2px solid var(--color-primary);
  }

  .footer-nav {
    display: flex;
    gap: 1.5rem;
    align-items: center;
    font-family: var(--font-main);
  }

  .footer-nav__link {
    color: var(--color-accent);
    text-decoration: none;
    font-weight: var(--font-weight-medium);
    transition: color 0.3s ease;
  }

  .footer-nav__link:hover {
    color: var(--color-light);
  }

  .footer-nav__info {
    font-size: 1rem;
    font-weight: var(--font-weight-regular);
    color: var(--color-light);
  }
</style>